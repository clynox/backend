// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        String   @id @default(cuid())
  name      String
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teachers    Teacher[]
  students    Student[]
  classes     Class[]
  assignments Assignment[]
}

model Teacher {
  id        String   @id @default(cuid())
  name      String
  email     String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School       @relation(fields: [schoolId], references: [id])
  classes     Class[]
  assignments Assignment[]

  @@unique([email, schoolId])
}

model Student {
  id        String   @id @default(cuid())
  name      String
  email     String
  schoolId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school       School            @relation(fields: [schoolId], references: [id])
  enrollments  ClassEnrollment[]
  submissions  Submission[]

  @@unique([email, schoolId])
}

model Class {
  id        String   @id @default(cuid())
  name      String
  schoolId  String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  school      School            @relation(fields: [schoolId], references: [id])
  teacher     Teacher           @relation(fields: [teacherId], references: [id])
  enrollments ClassEnrollment[]
  assignments Assignment[]
}

model ClassEnrollment {
  id        String   @id @default(cuid())
  classId   String
  studentId String
  createdAt DateTime @default(now())

  class   Class   @relation(fields: [classId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@unique([classId, studentId])
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  schoolId    String
  teacherId   String
  classId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  school      School       @relation(fields: [schoolId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  class       Class        @relation(fields: [classId], references: [id])
  submissions Submission[]
}

model Submission {
  id           String   @id @default(cuid())
  content      String
  assignmentId String
  studentId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id])
  student    Student    @relation(fields: [studentId], references: [id])
}

